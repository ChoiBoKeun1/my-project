name: CD

on:
  push:
    branches:
      - main

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. GitHub 저장소 체크아웃
      - name: 저장소 체크아웃
        uses: actions/checkout@v3

      # 2. JDK 17 설정
      - name: JDK 17 설정
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 캐싱
      - name: Gradle 캐싱
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Gradle 실행 권한 부여
      - name: Gradle 실행 권한 부여
        run: chmod +x gradlew

      # 5. Gradle로 프로젝트 빌드
      - name: Gradle 빌드 (테스트 제외)
        run: ./gradlew build -x test

      # 6. Docker 이미지 빌드 및 푸시
      - name: Docker 이미지 빌드 및 푸시
        run: |
          docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }} . 
          docker push ${{ secrets.DOCKER_REPO }}

      # 7. .env 파일 생성
      - name: .env 파일 생성
        run: |
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" >> .env
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env

      # 8. .env 파일 EC2 서버로 전송
      - name: .env 파일 전송
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: ".env"
          target: "/home/ubuntu/my-project/"

      # 9. docker-compose.yml 파일 EC2 서버로 전송
      - name: docker-compose.yml 파일 전송
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "/home/ubuntu/my-project/"

      # 10. Dockerfile 파일 EC2 서버로 전송
      - name: Dockerfile 파일 전송
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "Dockerfile"
          target: "/home/ubuntu/my-project/"

      # 11. Docker Compose를 이용해 배포
      - name: Docker Compose로 배포
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.EC2_HOST }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/my-project/
            sudo docker-compose down
            sudo docker-compose up --build -d
